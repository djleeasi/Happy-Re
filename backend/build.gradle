buildscript {
    ext {
        springBootVer = '2.4.5'
        querydslVer = '4.4.0'
        springDependencyMgmtVer = '1.0.11'
        springLoadedVer = '1.2.8'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVer}"
        classpath "io.spring.gradle:dependency-management-plugin:${springDependencyMgmtVer}.RELEASE"
        classpath "org.springframework:springloaded:${springLoadedVer}.RELEASE"
    }
}

plugins {
    id 'java'
    id 'idea'
    id 'org.springframework.boot' version "${springBootVer}"
}

apply plugin: 'io.spring.dependency-management'
apply plugin: 'eclipse'

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/snapshot' }
    maven { url 'https://repo.spring.io/milestone' }
    maven { url "https://repo.spring.io/libs-release" }
    maven { url "https://repo.maven.apache.org/maven2" }
    maven { url "https://build.shibboleth.net/nexus/content/repositories/releases" }
}

group 'com.ssafy'
version '1.0-SNAPSHOT'
sourceCompatibility = '1.8'

configurations {
    providedRuntime
}

//set build time and inject value to application.properties
def buildTime() {
    def date = new Date()
    def formattedDate = date.format('yyyyMMdd_HHmm')
    return formattedDate
}

project.ext.set("build.date", buildTime())

processResources {
    with copySpec {
        from "src/main/resources"
        include "**/application*.yml"
        include "**/application*.yaml"
        include "**/application*.properties"
        project.properties.findAll().each { prop ->
            if (prop.value != null) {
                filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: [(prop.key): String.valueOf(prop.value)])
                filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: [('project.' + prop.key): String.valueOf(prop.value)])
                filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: [('project.ext.' + prop.key): String.valueOf(prop.value)])
            }
        }
    }
}

dependencies {
    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation("org.springframework.boot:spring-boot-starter-websocket")
    implementation("org.springframework.boot:spring-boot-starter-security")
    implementation("org.springframework.boot:spring-boot-starter-data-jpa")
    implementation("org.springframework.boot:spring-boot-starter-actuator")
    implementation("org.springframework.plugin:spring-plugin-core:2.0.0.RELEASE")
    testImplementation("org.springframework.security:spring-security-test")
    annotationProcessor("org.springframework.boot:spring-boot-starter-data-jpa")
    runtimeOnly("mysql:mysql-connector-java")
    developmentOnly("org.springframework.boot:spring-boot-devtools")
    annotationProcessor("org.springframework.boot:spring-boot-configuration-processor")

    implementation('commons-io:commons-io:2.6')
    implementation("org.apache.commons:commons-collections4:4.4")
    implementation("org.apache.commons:commons-lang3:3.9")

    implementation("com.querydsl:querydsl-jpa:${querydslVer}")
    implementation("com.querydsl:querydsl-apt:${querydslVer}")

    //STOMP 웹소캣 서버 사이드 테스트를 위한 의존성 추가
    implementation("org.springframework.boot:spring-boot-starter-mustache")
    //STOMP 관련 프론트 라이브러리
    implementation('org.webjars.bower:jquery:3.3.1')
    implementation('org.webjars:sockjs-client:1.1.2')
    implementation('org.webjars:stomp-websocket:2.3.3-1')
    implementation('org.webjars:webjars-locator:0.30')
    //WebRTC 클라이언트 의존성 추가
    implementation('org.webjars.bower:webrtc-adapter:7.4.0')
    //Kurento (미디어서버) 관련 의존성 추가
    implementation('org.kurento:kurento-client:6.16.0')
    implementation('org.kurento:kurento-utils-js:6.15.0')

    //IntelliJ용
    //IntelliJ에서는 하기 annotationProcessor를 쓰면 별도의 querydsl 플러그인 및 플러그인 설정이 불필요.
    annotationProcessor("com.querydsl:querydsl-apt:${querydslVer}:jpa")

    implementation("com.squareup.retrofit2:retrofit:2.7.1")
    implementation("com.squareup.retrofit2:converter-jackson:2.7.1")
    implementation("com.squareup.okhttp3:logging-interceptor:3.9.0")

    implementation("com.google.guava:guava:29.0-jre")
    annotationProcessor("com.google.guava:guava:29.0-jre")

    testImplementation("com.jayway.jsonpath:json-path:2.4.0")

    implementation("com.auth0:java-jwt:3.10.3")

    implementation("io.springfox:springfox-swagger2:3.0.0")
    implementation("io.springfox:springfox-swagger-ui:3.0.0")
    implementation("io.springfox:springfox-data-rest:3.0.0")
    implementation("io.springfox:springfox-bean-validators:3.0.0")
    implementation("io.springfox:springfox-boot-starter:3.0.0")

    implementation("javax.annotation:javax.annotation-api:1.2")

    implementation("org.projectlombok:lombok:1.18.20")
    annotationProcessor("org.projectlombok:lombok:1.18.20")

    testImplementation('org.springframework.boot:spring-boot-starter-test')

    //구글 엑세스토큰 검증 라이브러리
    implementation ('com.google.api-client:google-api-client:1.32.1')
    implementation ('io.jsonwebtoken:jjwt:0.9.1')
    implementation ('com.google.http-client:google-http-client-jackson2:1.39.2')

    //kakao api
    implementation ('org.springframework.boot:spring-boot-starter-thymeleaf')

}

test {
    useJUnitPlatform()
}

//generated 폴더를 지정
//문자열 타입으로 generated라는 변수를 만들어주었다. 그리고 파일 경로를 만들어주었다.
//
//        Querydsl은 자동으로 클래스를 만드는 기능을 가지고 있다. 그것을 Qclass라고 한다. (보통 클래스 이름 앞에 Q를 붙여서 만들어지기 때문)
//이 파일들은 기본적으로 build directory 안에 들어가게 된다. 그래서 우리 눈에 보이지 않는다.
//        위 코드는 해당 파일들을 우리 눈에 보이게 꺼내오기 위해 경로를 설정해 준 것이다.
//
//        왜냐하면 인텔리제이를 사용할 때 발생할 수 있는 잠재적인 문제를 피하기 위함이다.
//        만약 기본값으로 Qclass를 생성하면 빌드 디렉토리에 들어가는데, gradle build할 때 스캔하는 영역과 ide가 스캔할 때 인텔리제이가 스캔하는 영역이 중복스캔이 일어날 수 있다.
//        그래서 이런 문제를 해결하기 위해 Qclass의 생성 폴더 위치를 강제로 변경한 것이다.
//Qclass가 git에 올라가지 않게 주의할 것.
def generated = 'src/main/generated'

//자바 컴파일 시 생성된 source(complied .class 아님!!) 가 갈 폴더를 generated 로 설정
tasks.withType(JavaCompile) {
    options.getGeneratedSourceOutputDirectory().set(file(generated))
}

//generated folder를 source 로 볼 수 있도록 추가
sourceSets {
    main.java.srcDirs += [ generated ]
}

//gradle clean 시 자동생성된 source 파일들 삭제하도록 설정
clean {
    delete file(generated)
}